//? Autoincrement config
use("incidencias");
db.createCollection("counters");
db.counters.insertMany([
    { counter: "incidencesId", sequenceValue: 0 },
    { counter: "incidenceCategoryId", sequenceValue: 0 },
    { counter: "statusId", sequenceValue: 0 },
    { counter: "priorityId", sequenceValue: 0 },
    { counter: "roleId", sequenceValue: 0 },
    { counter: "placeId", sequenceValue: 0 },
    { counter: "areaId", sequenceValue: 0 },
    { counter: "genderId", sequenceValue: 0 },
    { counter: "cityId", sequenceValue: 0 },
    { counter: "countryId", sequenceValue: 0 },
    { counter: "addressId", sequenceValue: 0 }
]);
const autoIncrement = (collection) => {
    const sequenceDocument = db.counters.findOneAndUpdate(
       { counter: `${collection}Id`},
       { $inc: { sequenceValue: 1 }},
       { returnDocument: "after" }
    )
    return sequenceDocument.sequenceValue;
}

use("incidencias");
//? Incidences
db.createCollection("incidences", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "id_user", "id_place", "id_status", "id_priority", "id_category", "date", "description"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                id_user: {
                    bsonType: "int",
                    description: "id_user is required. Must be a int"
                },
                id_place: {
                    bsonType: "int",
                    description: "id_place is required. Must be a int"
                },
                id_status: {
                    bsonType: "int",
                    description: "id_status is required. Must be a int"
                },
                id_priority: {
                    bsonType: "int",
                    description: "id_priority is required. Must be a int"
                },
                id_category: {
                    bsonType: "int",
                    description: "id_category is required. Must be a int"
                },
                date: {
                    bsonType: "date",
                    description: "date is required. Must be a date"
                },
                description: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z ]+$",
                    description: "description is required. Must be a string"
                }
            }
        }
    }
})
db.incidences.insertMany([
    {
        id: autoIncrement("incidences"),
        id_user: 1,
        id_place: 2,
        id_status: 3,
        id_priority: 2,
        id_category: 1,
        date: new Date(),
        description: "Monitor is not working"
    }
])

//? Category
db.createCollection("incidenceCategory", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "descripcion"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                descripcion: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z ]+$",
                    enum: ["Hardware", "Software", "Services", "Other"],
                    description: "descripcion is required. Must be a string"
                }
            }
        }
    }
});
db.incidenceCategory.insertMany([
    {
        id: autoIncrement("incidenceCategory"),
        descripcion: "Hardware"
    },
    {
        id: autoIncrement("incidenceCategory"),
        descripcion: "Software"
    },
    {
        id: autoIncrement("incidenceCategory"),
        descripcion: "Services"
    },
    {
        id: autoIncrement("incidenceCategory"),
        descripcion: "Other"
    }
]);

//? Status
db.createCollection("status", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "descripcion"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                descripcion: {
                    bsonType: "string",
                    enum: ["New", "In Progress", "Resolved"],
                    description: "descripcion is required. Must be a string with one of the values: New, In Progress, Resolved"
                }
            }
        }
    }
})
db.status.insertMany([
    {
        id: autoIncrement("status"),
        descripcion: "New"
    },
    {
        id: autoIncrement("status"),
        descripcion: "In Progress"
    },
    {
        id: autoIncrement("status"),
        descripcion: "Resolved"
    }
]);

//? Priority
db.createCollection("priority", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "descripcion"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                descripcion: {
                    bsonType: "string",
                    enum: ["Low", "Medium", "High"],
                    description: "descripcion is required. Must be a string with one of the values: Low, Medium, High"
                }
            }
        }
    }
});
db.priority.insertMany([
    {
        id: autoIncrement("priority"),
        descripcion: "Low"
    },
    {
        id: autoIncrement("priority"),
        descripcion: "Medium"
    },
    {
        id: autoIncrement("priority"),
        descripcion: "High"
    }
])

//? Place
db.createCollection("place", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "id_area", "name", "capacity"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                id_area: {
                    bsonType: "int",
                },
                name: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z ]+$",
                    enum: ["Apolo", "Artemis", "Sputnik", "Hunters", "Bathrooms", "Corvus" ],
                    description: "name is required. Must be a string"
                },
                capacity: {
                    bsonType: "int",
                    description: "capacity is required. Must be a int"
                }
            }
        }
    }
});
db.place.insertMany([
    {
        id: autoIncrement("place"),
        id_area: autoIncrement("place"),
        name: "Apolo",
        capacity: 25
    },
    {
        id: autoIncrement("place"),
        id_area: autoIncrement("place"),
        name: "Artemis",
        capacity: 25
    },
    {
        id: autoIncrement("place"),
        id_area: autoIncrement("place"),
        name: "Sputnik",
        capacity: 25
    },
    {
        id: autoIncrement("place"),
        id_area: autoIncrement("place"),
        name: "Hunters",
        capacity: 30
    },
    {
        id: autoIncrement("place"),
        id_area: autoIncrement("place"),
        name: "Bathrooms",
        capacity: 5
    },
    {
        id: autoIncrement("place"),
        id_area: autoIncrement("place"),
        name: "Corvus",
        capacity: 25
    }
])

//? Area
db.createCollection("area", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "name"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                name: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z ]+$",
                    description: "name is required. Must be a string"
                }
            }
        }
    }
})
db.area.insertMany([
    {
        id: autoIncrement("area"),
        name: "Administrative"
    },
    {
        id: autoIncrement("area"),
        name: "Technical"
    },
    {
        id: autoIncrement("area"),
        name: "Human Resources"
    },
    {
        id: autoIncrement("area"),
        name: "Accounting"
    },
    {
        id: autoIncrement("area"),
        name: "Recreation"
    }
])

//? User
db.createCollection("user", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["discord_id", "username", "email", "id_role", "id_gender", "id_address"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                discord_id: {
                    bsonType: "string"
                },
                username: {
                    bsonType: "string"
                },
                email: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$",
                    description: "email is required. Must be a string"
                },
                id_role: {
                    bsonType: "int",
                    description: "id_role is required. Must be a int"
                },
                id_gender: {
                    bsonType: "int",
                    description: "id_gender is required. Must be a int"
                },
                id_address: {
                    bsonType: "int",
                    description: "id_address is required. Must be a int"
                },
                guilds: {
                    bsonType: "array"
                },
                allowances: {
                    bsonType: "object",
                    description: "Insert permissions",
                    properties: {
                        "/api": {
                            bsonType: "array",
                            items: {
                                bsonType: "string",
                                description: "Insert specific version"
                            }
                        }
                    }
                }

            }
        }
    }
})
db.user.insertMany([
    {
        discord_id: "732340090168410113",
        username: "angel_vlk",
        email: "angel@example.com",
        id_role: 1,
        id_gender: 1,
        id_address: 2
    }
])

//? Role
db.createCollection("role", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "name"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                name: {
                    bsonType: "string",
                    enum: ["admin", "trainer", "camper"],
                    pattern: "^[a-zA-Z ]+$",
                    description: "name is required. Must be a string"
                }
            }
        }
    }
});
db.role.insertMany([
    {
        id: autoIncrement("role"),
        name: "admin"
    },
    {
        id: autoIncrement("role"),
        name: "trainer"
    },
    {
        id: autoIncrement("role"),
        name: "camper"
    }
])


//? Gender
db.createCollection("gender", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "name"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                name: {
                    bsonType: "string",
                    enum: ["Male", "Female"],
                    pattern: "^[a-zA-Z ]+$",
                    description: "name is required. Must be a string"
                }
            }
        }
    }
});
db.gender.insertMany([
    {
        id: autoIncrement("gender"),
        name: "Male"
    },
    {
        id: autoIncrement("gender"),
        name: "Female"
    }
])

//? City
db.createCollection("city", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "id_country", "name"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                id_country: {
                    bsonType: "int",
                    description: "id_country is required. Must be a int"
                },
                name: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z ]+$",
                    description: "name is required. Must be a string"
                }
            }
        }
    }
});
db.city.insertMany([
    {
        id: autoIncrement("city"),
        id_country: 1,
        name: "Bogota"
    },
    {
        id: autoIncrement("city"),
        id_country: 2,
        name: "Medellin"
    },
    {
        id: autoIncrement("city"),
        id_country: 3,
        name: "Cali"
    }
])

//? Country
db.createCollection("country", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "name"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                name: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z ]+$",
                    description: "name is required. Must be a string"
                }
            }
        }
    }
})

//? Address 
db.createCollection("address", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id", "id_country", "street", "number"],
            properties: {
                _id: {
                    bsonType: "objectId"
                },
                id: {
                    bsonType: "int",
                },
                id_country: {
                    bsonType: "int",
                },
                street: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z 0-9]+$",
                    description: "street is required. Must be a string"
                },
                number: {
                    bsonType: "int",
                    description: "number is required. Must be a int"
                }
            }
        }
    }
});
db.address.insertMany([
    {
        id: autoIncrement("address"),
        id_country: 1,
        street: "Calle 123",
        number: 123
    },
    {
        id: autoIncrement("address"),
        id_country: 2,
        street: "Calle 456",
        number: 456
    }
])





